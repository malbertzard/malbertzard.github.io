[
  {
    "objectID": "content/posts.html",
    "href": "content/posts.html",
    "title": "Posts",
    "section": "",
    "text": "The unlikely story of two fighting brothers and what it tells us about configs\n\n\n\n\n\n\n\n\n\n\n\nAug 1, 2024\n\n\nMathis Albertzard\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Welcome to my brain dumb.\nThis is where all my thoughts and projects come to hang out, including but definitely not limited to:\n\nSoftware Development\nCool Software Tools\nProgramming\nMathematics\n\nFeel free to browse around and see what I’m up to!\nNo don’t take this serious\nYes I mean what I write here"
  },
  {
    "objectID": "content/about.html",
    "href": "content/about.html",
    "title": "About",
    "section": "",
    "text": "I live in the terminal.\nI am a Free and Open Source Software (FOSS) enthusiast.\nNeovim is my home.\nI love exploring new programming languages."
  },
  {
    "objectID": "content/about.html#tldr",
    "href": "content/about.html#tldr",
    "title": "About",
    "section": "",
    "text": "I live in the terminal.\nI am a Free and Open Source Software (FOSS) enthusiast.\nNeovim is my home.\nI love exploring new programming languages."
  },
  {
    "objectID": "content/about.html#introduction",
    "href": "content/about.html#introduction",
    "title": "About",
    "section": "Introduction",
    "text": "Introduction\nHey there! I’m Mathis, a Dev from Germany. I specialize in backend development with PHP and Python. Right now, I’m diving into Golang. Professional Background\nI’ve got a ton of experience with PHP, especially in Laravel and Symfony, doing the full stack thing in both. Lately, I’ve been messing around with Golang, making CLI tools to make dev life suck less. In my free time, and when I should have been paying attention in class, I’ve played with a bunch of other programming languages, with a soft spot for Python.\nSo, yeah, that’s me. Poke around if you’re curious."
  },
  {
    "objectID": "content/posts/config-as-code/index.html",
    "href": "content/posts/config-as-code/index.html",
    "title": "The unlikely story of two fighting brothers and what it tells us about configs",
    "section": "",
    "text": "I’ve always found the debate between Vim and Emacs to be fascinating. Why are these two editors still being compared today?\nMost of the debate is obviously historical—both pieces of software are old. But even then, they were never alone. Other text editors and IDEs have been around for decades too, yet the rivalry between Vim and Emacs stands out like a sore thumb (or, should I say, a sore pinky finger from all that Ctrl key action).\nThis overlap today is just wild. The number of people switching between these editors is massive (in relative terms for their size), especially when you count Neovim.\nIf you don’t know anything about these tools, this would be baffling. Why do people get so worked up over these two editors?\n\n\nOne is built for minimalism, and the other is an application platform. Vim is like the Swiss Army knife of text editors—efficient, fast, and always ready to slice through text with just a few keystrokes. It’s all about providing a powerful text editing experience without any unnecessary fluff.\nEmacs, on the other hand, is like a full-blown survival kit. It’s not just a text editor but a platform where you can run applications, read emails, browse the web, and even play games. It’s often described as an operating system within an operating system, with its extensibility and customization options making it a beast of its own.\nGiven these differences, it would seem far more reasonable to compare Emacs to JetBrains products like IntelliJ and Vim to Nano. IntelliJ and its suite of products are also full-fledged platforms that support various programming languages and offer extensive tools and integrations out of the box. Nano, like Vim, is minimalistic but even more stripped down, focusing purely on text editing without the learning curve.\nAnd sure, these comparisons happen, but it’s not the main war. (That one is fought against VSCode.)\nImagine a chart showing the complexity of these editors out of the box, and you’d see Vim and Emacs are in entirely different ballparks.\n\n\n\nHere’s the kicker—despite their differences, Vim and Emacs share a lot of similarities.\n\nExtensibility: Both editors are built on the idea of extensibility. You can customize and extend their functionality using plugins and scripts. Vim uses Vimscript (or Lua in Neovim), while Emacs uses Emacs Lisp. This means you can bend them to your will and make them do your bidding.\nText-Focused: Both Vim and Emacs are fundamentally text-focused. They are designed to make text editing as efficient and powerful as possible. Whether you’re writing code, prose, or configuration files, these editors provide the tools you need to wrangle text with precision.\nConfig as Code: Configuring both Vim and Emacs is done through code. This means you can script your setup, share it with others, and version control it. It’s like having a secret sauce recipe you can tweak and perfect over time.\n\n\n\n\nOr why I can’t use deep software that has just key-value pairs as options—sadly, looking at you, Zed.\nFor Vim and Emacs users, configurations are not just a set of preferences but a way to extend and personalize the editor to fit their workflows perfectly. The ability to write custom functions, automate repetitive tasks, and create complex keybindings transforms these editors into powerful, personalized tools.\nIn contrast, software that limits configurations to simple key-value pairs often falls short for power users. While such configurations might be easier for beginners to understand and manage, they lack the depth and flexibility that coding your config provides. This is why many developers gravitate towards Vim and Emacs despite their steep learning curves—once you master them, the level of control and efficiency you gain is unmatched.\nSo, while the debate between Vim and Emacs may seem like a relic of the past, it continues to thrive because of the shared values of extensibility, text focus, and code-based configurations. These principles resonate deeply with users who demand more from their tools and are willing to invest the time to master them."
  },
  {
    "objectID": "content/posts/config-as-code/index.html#the-differences",
    "href": "content/posts/config-as-code/index.html#the-differences",
    "title": "The unlikely story of two fighting brothers and what it tells us about configs",
    "section": "",
    "text": "One is built for minimalism, and the other is an application platform. Vim is like the Swiss Army knife of text editors—efficient, fast, and always ready to slice through text with just a few keystrokes. It’s all about providing a powerful text editing experience without any unnecessary fluff.\nEmacs, on the other hand, is like a full-blown survival kit. It’s not just a text editor but a platform where you can run applications, read emails, browse the web, and even play games. It’s often described as an operating system within an operating system, with its extensibility and customization options making it a beast of its own.\nGiven these differences, it would seem far more reasonable to compare Emacs to JetBrains products like IntelliJ and Vim to Nano. IntelliJ and its suite of products are also full-fledged platforms that support various programming languages and offer extensive tools and integrations out of the box. Nano, like Vim, is minimalistic but even more stripped down, focusing purely on text editing without the learning curve.\nAnd sure, these comparisons happen, but it’s not the main war. (That one is fought against VSCode.)\nImagine a chart showing the complexity of these editors out of the box, and you’d see Vim and Emacs are in entirely different ballparks."
  },
  {
    "objectID": "content/posts/config-as-code/index.html#the-similarities",
    "href": "content/posts/config-as-code/index.html#the-similarities",
    "title": "The unlikely story of two fighting brothers and what it tells us about configs",
    "section": "",
    "text": "Here’s the kicker—despite their differences, Vim and Emacs share a lot of similarities.\n\nExtensibility: Both editors are built on the idea of extensibility. You can customize and extend their functionality using plugins and scripts. Vim uses Vimscript (or Lua in Neovim), while Emacs uses Emacs Lisp. This means you can bend them to your will and make them do your bidding.\nText-Focused: Both Vim and Emacs are fundamentally text-focused. They are designed to make text editing as efficient and powerful as possible. Whether you’re writing code, prose, or configuration files, these editors provide the tools you need to wrangle text with precision.\nConfig as Code: Configuring both Vim and Emacs is done through code. This means you can script your setup, share it with others, and version control it. It’s like having a secret sauce recipe you can tweak and perfect over time."
  },
  {
    "objectID": "content/posts/config-as-code/index.html#what-does-this-mean-for-configurations",
    "href": "content/posts/config-as-code/index.html#what-does-this-mean-for-configurations",
    "title": "The unlikely story of two fighting brothers and what it tells us about configs",
    "section": "",
    "text": "Or why I can’t use deep software that has just key-value pairs as options—sadly, looking at you, Zed.\nFor Vim and Emacs users, configurations are not just a set of preferences but a way to extend and personalize the editor to fit their workflows perfectly. The ability to write custom functions, automate repetitive tasks, and create complex keybindings transforms these editors into powerful, personalized tools.\nIn contrast, software that limits configurations to simple key-value pairs often falls short for power users. While such configurations might be easier for beginners to understand and manage, they lack the depth and flexibility that coding your config provides. This is why many developers gravitate towards Vim and Emacs despite their steep learning curves—once you master them, the level of control and efficiency you gain is unmatched.\nSo, while the debate between Vim and Emacs may seem like a relic of the past, it continues to thrive because of the shared values of extensibility, text focus, and code-based configurations. These principles resonate deeply with users who demand more from their tools and are willing to invest the time to master them."
  }
]